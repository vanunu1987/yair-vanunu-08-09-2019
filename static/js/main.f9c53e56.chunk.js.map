{"version":3,"sources":["App.module.scss","components/SearchBar/SearchBar.module.scss","components/Header/Header.module.scss","containers/Main/Main.module.scss","components/FavoritesList/FavoritePreview/FavoritePreview.module.scss","containers/Favorites/Favorites.module.scss","components/DaysForecasting/DayForecast/DayForecast.module.scss","components/DaysForecasting/DaysForecasting.module.scss","components/FavoritesList/FavoritesList.module.scss","components/UI/Backdrop/Backdrop.module.css","components/UI/Toast/Toast.module.scss","services/axiosService.js","services/forecastService.js","services/utilService.js","store/action/forecast.js","store/action/actionTyps.js","services/favoritesService.js","store/action/favorites.js","components/DaysForecasting/DayForecast/DayForecast.jsx","components/DaysForecasting/DaysForecasting.jsx","components/DaysForecasting/CurrentForecasting/CurrentForecasting.jsx","components/SearchBar/SearchBar.jsx","containers/Main/Main.jsx","components/FavoritesList/FavoritePreview/FavoritePreview.jsx","components/FavoritesList/FavoritesList.jsx","containers/Favorites/Favorites.jsx","components/UI/Backdrop/Backdrop.js","components/Header/Header.jsx","components/UI/Toast/Toast.jsx","App.js","serviceWorker.js","store/utilty.js","store/reducer/forecastReducer.js","store/reducer/favoriteReducer.js","index.js","components/DaysForecasting/CurrentForecasting/CurrentForecasting.module.scss"],"names":["module","exports","forecastAxios","Axios","create","baseURL","interceptors","response","use","res","error","console","log","Error","API_KEY","getLocKey","key","a","axiosService","get","data","get5DaysForecast","getCurrentForecast","getCityObj","cityArr","map","obj","Key","LocalizedName","Country","saveToStorage","value","str","JSON","stringify","localStorage","setItem","loadFromStorage","getItem","parse","setForecast","forecast","type","set5DaysForecast","daysForecast","setLocKey","locKey","setIsDropdown","val","setErrorHandle","err","saveFavorite","payload","currLoc","length","favoritesCities","utilService","id","name","currForecast","cityObj","getFavorites","citiesObj","Promise","all","Object","keys","city","forecastService","assign","item","join","getDefultLoc","setFavorite","loadFavorites","dispatch","favoritesService","loadDefultFavorites","dayForecast","props","dayStatus","isDay","root","day","icon","Icon","maxTemp","Temperature","Maximum","Value","minTemp","Minimum","style","className","classes","moment","Date","format","toUpperCase","Math","round","daysForecasting","dayForecasting","daysToForecast","DayForecast","IsDayTime","currentForecasting","locRoot","forecastRoot","btnClass","favoriteList","Metric","onClick","toggleFavorite","WeatherText","LocalObservationDateTime","searchBar","dropclass","isDropdown","dropdown","currCityList","listClicked","onSubmit","search","placeholder","onChange","inputChange","inputText","Main","state","defultLoc","intLoad","loadLocation","onSetCurrLoc","onSetFavoriteCity","loadForecast","onSetCurrforecast","loadDaysForecast","onSetDaysforecast","handleChange","ev","target","replace","setState","handleSearch","preventDefault","onForecastLoad","setTimeout","handleListClicked","onDropdownChange","onLocationByKey","handleSaveToFavorite","curLocation","onFavoriteCity","this","favoriteCities","keyParm","match","params","onFavoritesDefultLoad","parmObj","curr5daysforecast","DailyForecasts","SearchBar","DaysForecasting","Component","connect","currLocationKey","favorite","locationArr","forecastActions","location","onCityListChange","cities","cityList","corLoc","curForecast","favoritesActions","onFavoritesLoad","FavoritePreview","fav","WeatherIcon","history","push","withRouter","FavoritesList","useState","page","setPage","favoritePreview","values","filter","idx","btnRightClass","disabled","Favorites","onFavoritesLoadDefult","favoritesAction","backdrop","show","Backdrop","clicked","Header","isBtnOpen","setBtn","navClass","exact","to","onCloseToast","errMsg","toString","substring","isError","errorToast","Toast","imgClass","wraperClass","path","component","Boolean","window","hostname","updateObj","prevObj","initialState","reducer","action","rootReducer","combineReducers","forecastReducer","favoriteReducer","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f9c53e56.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"App_App__15LM-\",\"night\":\"App_night__t-6Yt\",\"wraper\":\"App_wraper__2RCIr\",\"open\":\"App_open__2tvxQ\",\"blurAnimat\":\"App_blurAnimat__2bHRP\",\"close\":\"App_close__2HOmr\",\"blurAnimat2\":\"App_blurAnimat2__39IiI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"search-container\":\"SearchBar_search-container__120Ba\",\"search-input\":\"SearchBar_search-input__3nzP3\",\"drop\":\"SearchBar_drop__3UsUl\",\"open\":\"SearchBar_open__1dTjC\",\"openul\":\"SearchBar_openul__1xYs5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header-container\":\"Header_header-container__16_5v\",\"nav-container\":\"Header_nav-container__2LWK-\",\"hamburger-btn\":\"Header_hamburger-btn__2X8yw\",\"open\":\"Header_open__2be9H\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main-container\":\"Main_main-container__2mNXd\",\"main-layout\":\"Main_main-layout__a53GJ\",\"content-container\":\"Main_content-container__ZUg5D\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"preview-container\":\"FavoritePreview_preview-container__-wOnR\",\"icon-img\":\"FavoritePreview_icon-img__2e2GT\",\"date\":\"FavoritePreview_date__1Pj_p\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"favorite-container\":\"Favorites_favorite-container__c3rMk\",\"content-container\":\"Favorites_content-container__jyYji\",\"title\":\"Favorites_title__3_Vn5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"day-container\":\"DayForecast_day-container__2LmZS\",\"icon-img\":\"DayForecast_icon-img__38ldX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"days-container\":\"DaysForecasting_days-container__2Y2Oz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list-container\":\"FavoritesList_list-container__3L9Yy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__3j6VK\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"toast-container\":\"Toast_toast-container__yHbXo\",\"toastTran\":\"Toast_toastTran__3S2QA\"};","import Axios from 'axios'\n\n\nexport const forecastAxios = Axios.create({\n    baseURL:'https://dataservice.accuweather.com/'\n})\n\nforecastAxios.interceptors.response.use(res => res,error => {\n    console.log('error : ',error);\n    throw new Error(error)\n})","\n\nimport * as axiosService from './axiosService'\n\nconst API_KEY = 'P0Ti5KaCm1Y4sANgkLRGCkaerZHAdSZr'\n\nconst getLocKey = async (key) => {\n    let res = await axiosService.forecastAxios\n    .get(`locations/v1/cities/autocomplete?apikey=${API_KEY}&q=${key}`)\n    return res.data\n}\nconst get5DaysForecast = async (key) => {\n    let res = await axiosService.forecastAxios\n    .get(`forecasts/v1/daily/5day/${key}?apikey=${API_KEY}&metric=true`)\n    return res.data\n}\nconst getCurrentForecast = async (key) => {\n    let res = await axiosService.forecastAxios\n    .get(`currentconditions/v1/${key}?apikey=${API_KEY}`)\n    return res.data[0]\n}\n\nconst getCityObj = cityArr =>{\n  return  cityArr.map(obj=>{\n        return{\n            'key': obj.Key,\n            'city': obj.LocalizedName,\n            'country': obj.Country.LocalizedName\n        }\n    })\n}\n\n\nexport default {\n    getLocKey,\n    get5DaysForecast,\n    getCurrentForecast,\n    getCityObj\n}","function saveToStorage(key, value) {\n    var str = JSON.stringify(value);\n    localStorage.setItem(key, str);\n}\nfunction loadFromStorage(key) {\n    // debugger\n    var str = localStorage.getItem(key)\n    return JSON.parse(str)\n}\n\nexport default {\n    saveToStorage,\n    loadFromStorage,\n}","import forecastService from '../../services/forecastService'\nimport utilService from '../../services/utilService'\nimport * as actionTypes from '../action/actionTyps'\n\n// Action creator\n\nexport const setForecast = (forecast)=>{\n    return {\n        type: actionTypes.SET_FORECAST,\n        forecast\n    }\n}\nexport const set5DaysForecast = (daysForecast)=>{\n    return {\n        type: actionTypes.SET_5DAYSFORECAST,\n        daysForecast\n    }\n}\nexport const setLocKey = (locKey)=>{\n    return {\n        type: actionTypes.SET_LOCKEY,\n        locKey\n    }\n}\n\nexport const setCityList = (cityList)=>{\n    return{\n        type: actionTypes.SET_CITY_LIST,\n        cityList\n    }\n}\n\nexport const setIsDropdown = (val)=>{\n    return{\n        type: actionTypes.SET_IS_DROPDOWN,\n        val\n    }\n}\n\nexport const setErrorHandle = (err) =>{\n    return{\n        type: actionTypes.SET_ERROR_HANDLE,\n        err\n    }\n}\n\n\n\n\n//Action\n\n\n  export const  getForecast =  location =>{\n        return async (dispatch) =>{\n            try {\n                let locationArr = await forecastService.getLocKey(location.name)\n                dispatch(setLocKey(locationArr))\n                utilService.saveToStorage('currLoc',locationArr)\n                if (locationArr.length>1 && !location.key ){\n                    dispatch(setIsDropdown(true))\n                }else {\n                    location.key= locationArr[0].Key\n                    let daysForecast = await forecastService.get5DaysForecast(location.key)\n                    dispatch(set5DaysForecast(daysForecast))\n                    utilService.saveToStorage('daysForecast',daysForecast)\n                    let currForecast = await forecastService.getCurrentForecast(location.key)\n                    dispatch(setForecast(currForecast))\n                    utilService.saveToStorage('currForecast',currForecast)\n                }\n            }\n            catch (error){\n                dispatch(setErrorHandle(error))\n            }\n        }\n\n}\n  export const  getForecastByKey =  cityObj =>{\n        return async (dispatch) =>{\n            try {\n                    let daysForecast = await forecastService.get5DaysForecast(cityObj.Key)\n                    dispatch(set5DaysForecast(daysForecast))\n                    utilService.saveToStorage('daysForecast',daysForecast)\n                    let currForecast = await forecastService.getCurrentForecast(cityObj.Key)\n                    dispatch(setForecast(currForecast))\n                    utilService.saveToStorage('currForecast',currForecast)\n                    let locationArr = await forecastService.getLocKey(cityObj.name)\n                    dispatch(setLocKey(locationArr))\n                    utilService.saveToStorage('currLoc',locationArr)\n            }\n            catch (error){\n                dispatch(setErrorHandle(error))\n            }\n        }\n\n}\n\n\n\n","export const SET_FORECAST = 'SET_FORECAST' \nexport const SET_LOCKEY = 'SET_LOCKEY' \nexport const SET_5DAYSFORECAST = 'SET_5DAYSFORECASTY' \nexport const SET_CITY_LIST = 'SET_CITY_LIST'\nexport const SET_IS_DROPDOWN = 'SET_IS_DROPDOWN'\nexport const SET_FAVORITE_CITIES = 'SET_FAVORITE_CITIES'\nexport const SET_ERROR_HANDLE = 'SET_ERROR_HANDLE'","\n\nimport utilService from './utilService'\nimport forecastService from '../services/forecastService'\n\nconst saveFavorite = (payload)=>{\n    if (payload.currLoc.length) payload.currLoc = payload.currLoc[0]\n    let favoritesCities = (!utilService.loadFromStorage('favorites')) ? {} :\n    utilService.loadFromStorage('favorites')\n    let val= (favoritesCities[payload.currLoc.Key]) ? false :\n    {id:payload.currLoc.Key,name:payload.currLoc.LocalizedName,currForecast:payload.cityObj}\n    favoritesCities = {...favoritesCities,[payload.currLoc.Key]: val}\n    utilService.saveToStorage('favorites',favoritesCities)\n    return favoritesCities\n}\n\n\nconst getFavorites = async() =>{\n  let citiesObj =  utilService.loadFromStorage('favorites')\n  if (!citiesObj) return null\n  citiesObj = await Promise.all(Object.keys(citiesObj).map(async city=>{\n    let currForecast = await forecastService.getCurrentForecast(citiesObj[city].id)\n    return  { [city]:\n            {...citiesObj[city],\n            currForecast}\n        }\n    }))\n    citiesObj = Object.assign({}, ...citiesObj.map(item =>{\n    let key = Object.keys(item).join()\n   return ({[item[key]['id']]: item[key]})\n   }))\n  return citiesObj\n}\n\nconst getDefultLoc = async ()=>{\n    let payload = {}\n        payload.cityObj = await forecastService.getCurrentForecast(\"215854\")\n        payload.currLoc = await forecastService.getLocKey(\"tel aviv\")\n        let favoritesCities = saveFavorite(payload)\n        return favoritesCities\n}          \nexport default {\n    saveFavorite,\n    getFavorites,\n    getDefultLoc\n}","import * as actionTypes from '../action/actionTyps'\nimport favoritesService from '../../services/favoritesService'\nimport utilService from '../../services/utilService'\n\nexport const setFavoriteCities = (payload)=>{\n    let citiesObj = favoritesService.saveFavorite(payload)\n    return{\n        type: actionTypes.SET_FAVORITE_CITIES,\n        citiesObj\n    }\n}\n\nexport const setFavorite = (citiesObj)=>{\n    return{\n        type: actionTypes.SET_FAVORITE_CITIES,\n        citiesObj\n    }\n}\n\nconst setErrorHandle = (err) =>{\n    return{\n        type: actionTypes.SET_ERROR_HANDLE,\n        err\n    }\n}\n\n\n\n//Action \nexport const  loadFavorites =  () =>{\n    return async (dispatch) =>{\n        try {\n            let citiesObj = await favoritesService.getFavorites()\n            utilService.saveToStorage('favorites',{...citiesObj})\n            dispatch(setFavorite(citiesObj))\n        }\n        catch (error){\n            dispatch(setErrorHandle(error))\n        }\n    }\n\n}\nexport const  loadDefultFavorites =  () =>{\n    return async (dispatch) =>{\n        try {\n            let citiesObj = await favoritesService.getDefultLoc()\n            dispatch(setFavorite(citiesObj))\n        }\n        catch (error){\n            dispatch(setErrorHandle(error))\n        }\n    }\n\n}\n","import React from 'react' \nimport classes from './DayForecast.module.scss'\nimport moment from 'moment'\n\nconst dayForecast = (props) =>{\n    let dayStatus = (props.isDay)? 'Day' : 'Night'\n    let root = props.day[dayStatus]\n    let icon = (root.Icon < 10) ? '0'+ root.Icon:root.Icon\n    let maxTemp = props.day.Temperature.Maximum.Value \n    let minTemp = props.day.Temperature.Minimum.Value \n    let style = {\n        'backgroundImage': `url(https://developer.accuweather.com/sites/default/files/${icon}-s.png)`\n    }\n    return(\n    <div className={classes['day-container']}>\n            <div style={style} className={classes['icon-img']}></div>\n            <h1>{moment(props.day.Date).format('ddd').toUpperCase()}.</h1>\n            <p>{Math.round(minTemp)}°/{Math.round(maxTemp)}°</p>\n    </div>\n    )\n}\nexport default dayForecast ","import React from 'react' \nimport DayForecast from './DayForecast/DayForecast'\nimport classes from './DaysForecasting.module.scss'\nconst daysForecasting = (props) =>{\n    let dayForecasting = props.daysToForecast.map(day=><li key={day.Date}>\n        <DayForecast day={day} isDay={props.currForecast && props.currForecast.IsDayTime}/>\n    </li>)\n    return(\n        <div className={classes['days-container']}>\n            <ul>\n                {dayForecasting}\n            </ul>\n    \n        </div>\n    )\n}\nexport default daysForecasting ","import React from 'react' \nimport moment from 'moment'\nimport classes from './CurrentForecasting.module.scss'\nconst currentForecasting = (props) =>{\n    let locRoot = (props.currLoc && props.currLoc.length)?props.currLoc[0]:props.currLoc\n    let forecastRoot = props.currForecast\n    let btnClass = (locRoot && props.favoriteList && props.favoriteList[locRoot.Key])? \n    `${classes['btn-span']} ${classes['saved']}`:`${classes['btn-span']}`\n    \n    \n    return(\n        <div className={classes['current-container']}>\n            <p className={classes['degree']}>{forecastRoot && Math.round(forecastRoot.Temperature.Metric.Value)}°</p>\n            <div className={classes['btn-content']}\n            onClick={props.toggleFavorite}>\n                <div className={btnClass}>\n                    <button  className={classes['favBtn']}>save</button>\n                    <span className=\"fas fa-heart\"></span>\n                </div>\n                <div className={classes['buttom-content']}>\n                    <p className={classes['weather']}>{forecastRoot && forecastRoot.WeatherText}</p>\n                    <div className={classes['location']}>\n                        <h2>{locRoot && locRoot.LocalizedName}</h2> ,\n                        <h3>{locRoot && locRoot.Country.LocalizedName}</h3>\n                    </div>\n                    <h3 className={classes['date']}>\n                    {forecastRoot && moment(forecastRoot.LocalObservationDateTime).format('MMM Do')}\n                    </h3>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default currentForecasting","import React from 'react' \nimport classes from './SearchBar.module.scss'\nconst searchBar = (props) =>{\n    let dropclass = (props.isDropdown) ? \n    `${classes['drop']} ${classes['open']}`: `${classes['drop']}`\n    let dropdown = props.isDropdown && props.currCityList && props.currCityList\n    .map(cityObj=><li key={cityObj.Key}\n    onClick={()=>props.listClicked(cityObj)}>\n    {cityObj.LocalizedName}, {cityObj.Country.LocalizedName}\n    </li>)\n    return(\n        <div className={classes['search-container']}>\n            <form onSubmit={props.search}>\n                <input className={classes['search-input']} type=\"text\" \n                placeholder=\"Find out the weather prediction in your desired location\"\n                onChange={props.inputChange}\n                value={props.inputText}/>\n            </form>\n            <ul className={dropclass}>\n                {dropdown}\n            </ul>\n        </div>\n    )\n}\nexport default searchBar ","import React,{Component} from 'react'\nimport { connect } from 'react-redux';\nimport * as forecastActions  from '../../store/action/forecast'\nimport * as favoritesActions  from '../../store/action/favorites'\nimport utilService from '../../services/utilService'\nimport DaysForecasting from '../../components/DaysForecasting/DaysForecasting'\nimport CurrentForecast from '../../components/DaysForecasting/CurrentForecasting/CurrentForecasting'\nimport SearchBar from '../../components/SearchBar/SearchBar'\nimport classes from './Main.module.scss'\n\n\nclass Main extends Component {\n    state = { \n        defultLoc: {key:\"215854\",name:'tel aviv'},\n        inputText:'',\n     }\n\n     async componentDidMount(){\n        await this.intLoad()\n        let {favoriteCities} = this.props\n        let { curLocation } = this.props\n        let keyParm = this.props.match.params.key\n        console.log(keyParm);\n        if (!favoriteCities) await this.props.onFavoritesDefultLoad()\n        let cityObj = keyParm && favoriteCities && favoriteCities[keyParm]\n        let parmObj = cityObj && {Key:cityObj.id, name:cityObj.name}\n        if (!curLocation) await this.props.onForecastLoad(this.state.defultLoc) \n        else if (keyParm) this.props.onLocationByKey(parmObj)\n     }\n    \n     intLoad = async () =>{\n        let loadLocation = utilService.loadFromStorage('currLoc')\n        await this.props.onSetCurrLoc(loadLocation)\n        let loadFavorites = utilService.loadFromStorage('favorites')\n        await this.props.onSetFavoriteCity(loadFavorites)\n        let loadForecast = utilService.loadFromStorage('currForecast')\n        await this.props.onSetCurrforecast(loadForecast)\n        let loadDaysForecast = utilService.loadFromStorage('daysForecast')\n        await this.props.onSetDaysforecast(loadDaysForecast)\n     }\n\n     handleChange = (ev) =>{\n        let inputText = ev.target.value\n        inputText = inputText.replace(/[^A-Za-z\\s]/ig, '')\n        this.setState({inputText})\n        \n     }\n\n     handleSearch = async (ev) =>{\n        ev.preventDefault()\n        if (this.props.isDropdown && !this.state.inputText) return\n        await this.props.onForecastLoad({key:null,name:this.state.inputText})\n        this.setState({inputText:''})\n        setTimeout(()=>{\n            this.setState({isDropdown:true})\n        },100)\n\n     }\n\n     handleListClicked = (cityObj)=>{\n        let obj = {Key:cityObj.Key, name:cityObj.LocalizedName}\n        this.props.onDropdownChange(false)\n        this.props.onLocationByKey(obj)\n\n     }\n     handleSaveToFavorite =()=>{\n         let payload = {}\n        payload.cityObj = this.props.currForecast\n        payload.currLoc = this.props.curLocation\n        this.props.onFavoriteCity(payload)\n\n    }\n\n    render() { \n        let daysForecast = (this.props.curr5daysforecast) ? this.props.curr5daysforecast.DailyForecasts:[]\n        return ( \n          <div className={classes['main-container']}>\n            <div className={classes['main-layout']}>\n              <SearchBar inputChange={this.handleChange}\n              inputText={this.state.inputText}\n              search={this.handleSearch}\n              isDropdown={this.props.isDropdown}\n              currCityList={this.props.curLocation}\n              listClicked={this.handleListClicked}/>\n              <div className={classes['content-container']}>\n                <CurrentForecast currForecast={this.props.currForecast}\n                currLoc={this.props.curLocation}\n                toggleFavorite={this.handleSaveToFavorite}\n                favoriteList={this.props.favoriteCities}/>\n                <DaysForecasting daysToForecast={daysForecast}\n                currForecast={this.props.currForecast}/>\n              </div>\n            </div>\n          </div>\n         );\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        curLocation: state.forecast.currLocationKey,\n        curr5daysforecast: state.forecast.curr5daysforecast,\n        currForecast: state.forecast.currForecast,\n        isDropdown: state.forecast.isDropdown,\n        currCityList: state.forecast.currCityList,\n        favoriteCities: state.favorite.favoriteCities\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onLocationByKey: (cityObj)=> dispatch(forecastActions.getForecastByKey(cityObj)),\n        onForecastLoad: (location)=> dispatch(forecastActions.getForecast(location)),\n        onDropdownChange: (val)=> dispatch(forecastActions.setIsDropdown(val)),\n        onCityListChange: (cities)=> dispatch(forecastActions.setCityList(cities)),\n        onSetCurrLoc: (corLoc)=> dispatch(forecastActions.setLocKey(corLoc)),\n        onSetCurrforecast: (curForecast)=> dispatch(forecastActions.setForecast(curForecast)),\n        onSetDaysforecast: (daysForecast)=> dispatch(forecastActions.set5DaysForecast(daysForecast)),\n        onFavoriteCity: (citiesObj)=>dispatch(favoritesActions.setFavoriteCities(citiesObj)),\n        onSetFavoriteCity: (citiesObj)=>dispatch(favoritesActions.setFavorite(citiesObj)),\n        onFavoritesLoad: ()=> dispatch(favoritesActions.loadFavorites()),\n        onFavoritesDefultLoad: ()=> dispatch(favoritesActions.loadDefultFavorites()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Main) ;","import React,{Component} from 'react' \nimport classes from './FavoritePreview.module.scss'\nimport { withRouter } from 'react-router-dom'\nimport moment from 'moment'\n\n\nclass  FavoritePreview  extends Component {\n\n    render(){\n\n        let root = this.props.fav\n        let icon = root.currForecast.WeatherIcon\n        icon = (icon < 10) ? '0'+ icon: icon\n        let style = {\n            'backgroundImage': `url(https://developer.accuweather.com/sites/default/files/${icon}-s.png)`\n        }\n        return(\n            <div className={classes['preview-container']}\n            onClick={()=>this.props.history.push(`/${root.id}`)}>\n                <h1>{root.name}</h1>\n                <p className={classes['date']}>{moment(root.currForecast.LocalObservationDateTime).format('MMM Do, h:mm a')}</p>\n                <div style={style} className={classes['icon-img']}></div>\n                <p>{Math.round(root.currForecast.Temperature.Metric.Value)}°</p>\n                <h2>{root.currForecast.WeatherText}</h2>\n            </div>\n        )\n    }\n}\nexport default withRouter(FavoritePreview) ","import React,{useState} from 'react' \nimport classes from './FavoritesList.module.scss'\nimport FavoritePreview from './FavoritePreview/FavoritePreview'\n\nconst FavoritesList = (props) =>{\n    const [page,setPage] = useState(1)\n    \n    let favoritePreview = props.favoriteList && Object.values(props.favoriteList) \n    .filter((favorite,idx)=>idx<page*3 && idx>=(page*3)-3)\n    .map(favorite=> favorite && <li key={favorite.id}>\n    <FavoritePreview  fav={favorite}/>\n    </li>)\n    let btnRightClass = (favoritePreview && favoritePreview.length<3 )?true: false\n    return(\n        <div className={classes['list-container']}>\n                <button disabled={page<=1} className=\"fas fa-chevron-left\"\n                    onClick={()=>setPage(page-1)}></button>\n               <ul>\n                    {favoritePreview}\n               </ul> \n                    <button disabled={btnRightClass} className=\"fas fa-chevron-right\"\n                    onClick={()=>setPage(page+1)}></button>\n        </div>\n)\n}\nexport default FavoritesList ","import React,{Component} from 'react'\nimport { connect } from 'react-redux';\nimport * as favoritesAction from '../../store/action/favorites'\nimport FavoritesList from '../../components/FavoritesList/FavoritesList'\nimport classes from './Favorites.module.scss'\n\n\nclass Favorites extends Component {\n    state = {  \n        favoriteCities: null\n    }\n\n    async componentDidMount(){\n        await this.props.onFavoritesLoad()\n        let {favoriteCities} = this.props\n        if (!favoriteCities) this.props.onFavoritesLoadDefult()\n    }\n\n    render() { \n        return (\n            <div className={classes['favorite-container']} >\n                <div className={classes['title']}>\n                    <h1>My Favorites Places</h1>\n                </div>\n                <div className={classes['content-container']}>\n                <FavoritesList favoriteList={this.props.favoriteCities}/>\n                </div>\n\n            </div>\n          )\n    }\n}\n\n\n\nconst mapStateToProps = state => {\n    return {\n        favoriteCities: state.favorite.favoriteCities,\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        onFavoritesLoad: ()=> dispatch(favoritesAction.loadFavorites()),\n        onFavoritesLoadDefult: ()=> dispatch(favoritesAction.loadDefultFavorites()),\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Favorites) ;","import React from 'react';\n\nimport classes from './Backdrop.module.css';\n\nconst backdrop = (props) => (\n    props.show ? <div className={classes.Backdrop} onClick={props.clicked}></div> : null\n);\n\nexport default backdrop;","import React, {useState} from 'react' \nimport { NavLink } from 'react-router-dom'\nimport classes from './Header.module.scss'\nimport Backdrop from '../../components/UI/Backdrop/Backdrop'\n\nconst Header = (props) =>{\n    const [isBtnOpen,setBtn] = useState(false)\n    let navClass = (isBtnOpen)? \n    `${classes['nav-container']} ${classes['open']}` : `${classes['nav-container']}`\n    return(\n        <div className={classes['header-container']}>\n            <h1>W.Prediction</h1>\n            <div className={navClass}>\n                <NavLink  exact to=\"/\">MAIN</NavLink> \n                <NavLink exact to=\"/favorites\">MY-FAVORITES</NavLink>\n            </div>\n            <button className={`fas fa-bars ${classes['hamburger-btn']}`}\n            onClick={()=>setBtn(!isBtnOpen)}></button>\n            <Backdrop show={isBtnOpen} clicked={()=>setBtn(!isBtnOpen)} />\n        </div>\n    )\n}\n\nexport default Header \n\n\n\n\n","\nimport React from 'react' \nimport * as forecastActions from '../../../store/action/forecast'\nimport { connect } from 'react-redux';\nimport classes from './Toast.module.scss'\nconst toast = (props) =>{\n    \n    let errMsg = props.err.toString().substring(13,props.length);\n\n    setTimeout(()=>{\n        props.onCloseToast(false)\n    },4000)\n    \n    return (\n        <div className={classes['toast-container']}>\n            <h1>somting went worng, {errMsg}</h1>\n        </div>\n    )\n}\nconst mapDispatchToProps = dispatch => {\n    return {\n        onCloseToast: (val)=> dispatch(forecastActions.setErrorHandle(val)),\n        \n    }\n}\n\nexport default connect(null,mapDispatchToProps)(toast)","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\nimport { connect } from 'react-redux';\nimport './App.css';\n\nimport Main from './containers/Main/Main'\nimport Favorites from './containers/Favorites/Favorites'\nimport Header from './components/Header/Header'\nimport Toast from './components/UI/Toast/Toast'\nimport classes from './App.module.scss'\n\n\nconst App = (props)=> {\n  let errorToast = (props.isError)? <Toast err={props.isError} />:''\n  let imgClass = (props.currForecast && props.currForecast.IsDayTime)?\n   `${classes['App']}`: `${classes['App']} ${classes['night']}`\n  let wraperClass = (props.currForecast && props.currForecast.IsDayTime)?\n   `${classes['wraper']} ${classes['close']}`: `${classes['wraper']} ${classes['open']}`\n  \n  return (\n    <div className={imgClass}>\n      <div className={wraperClass}>\n      <BrowserRouter>\n      <Header/>\n      {errorToast}\n        <Switch>\n          <Route exact path=\"/\" component={Main}/>\n          <Route exact path=\"/favorites\" component={Favorites}/>\n          <Route path=\"/:key?\" component={Main}/>\n        </Switch>\n      </BrowserRouter>\n      </div>\n    </div>\n  );\n}\n\nconst mapStateToProps = state => {\n  return {\n    isError: state.forecast.isError,\n    currForecast: state.forecast.currForecast,\n  }\n}\n\nexport default connect(mapStateToProps,null)(App) ;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export const updateObj = (prevObj,updateObj)=> {\nreturn{\n    ...prevObj,\n    ...updateObj\n}\n}","\nimport * as actionType from '../action/actionTyps'\nimport { updateObj } from '../utilty'\n\nconst initialState = {\ncurrLocationKey: null,\ncurr5daysforecast: null,\ncurrForecast: null,\ncurrCityList: null,\nisDropdown: false,\nisError: false\n\n}\n\nconst reducer = (state= initialState, action) =>{\n\n    switch (action.type) {\n        case actionType.SET_LOCKEY:\n            let { locKey } = action\n            return updateObj(state,\n                    {currLocationKey: locKey}\n             );\n        case actionType.SET_5DAYSFORECAST:\n            let {daysForecast} = action\n            return updateObj(state,\n                {curr5daysforecast: daysForecast});\n            \n        case actionType.SET_FORECAST:\n            let {forecast} = action\n            return updateObj(state,\n                {currForecast: forecast});\n\n        case actionType.SET_CITY_LIST:\n            let {cityList} = action\n            return updateObj(state,\n                {currCityList: cityList});\n\n        case actionType.SET_IS_DROPDOWN:\n            let {val} = action\n            return updateObj(state,\n                {isDropdown: val});\n\n        case actionType.SET_ERROR_HANDLE:\n            let {err} = action\n            return updateObj(state,\n                {isError: err});\n    }       \n        \n            return state \n    \n}\n\n\nexport default reducer;\n\n","import * as actionType from '../action/actionTyps'\nimport { updateObj } from '../utilty'\n\n\nconst initialState = {\nfavoriteCities: null\n\n}\n\nconst reducer = (state= initialState, action) =>{\n\n    switch (action.type) {\n        case actionType.SET_FAVORITE_CITIES:\n            let { citiesObj } = action\n            return updateObj(state,\n                    {favoriteCities: citiesObj}\n             );\n    }\n    return state\n}\n\nexport default reducer;\n            ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {createStore, combineReducers, applyMiddleware, compose} from 'redux'\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport forecastReducer from './store/reducer/forecastReducer'\nimport favoriteReducer from './store/reducer/favoriteReducer'\n\nconst rootReducer = combineReducers({\n    forecast: forecastReducer,\n    favorite:favoriteReducer,\n})\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore( rootReducer,composeEnhancers(applyMiddleware( thunk)));\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"current-container\":\"CurrentForecasting_current-container__2KDlI\",\"degree\":\"CurrentForecasting_degree__oBnv6\",\"location\":\"CurrentForecasting_location__WiOZU\",\"date\":\"CurrentForecasting_date__2M3QO\",\"weather\":\"CurrentForecasting_weather__jnISa\",\"favBtn\":\"CurrentForecasting_favBtn__3GPUQ\",\"buttom-content\":\"CurrentForecasting_buttom-content__2Q0i9\",\"btn-content\":\"CurrentForecasting_btn-content__2NIOi\",\"btn-span\":\"CurrentForecasting_btn-span__1uBeN\",\"icon-img\":\"CurrentForecasting_icon-img__3Xo_K\",\"saved\":\"CurrentForecasting_saved__3cdJK\"};"],"sourceRoot":""}